<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAATkxLGS4sLFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1LShtPTUzgJCMi/gAAAHoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATkxLbE9NTP8kIyL+AAAA5QAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATkxLZBsaGgBPTUynT01M/yQjIv4AAAD/AAAAJAAA
        AEYAAAAbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        Ah/8IAA///AA///4D////D////////////8=
</value>
  </data>
</root>